#include <AIROARM.h>
#include "SoftwareSerial.h"
#include "HUSKYLENS.h"
#include <Servo.h>

HUSKYLENS huskylens;
AiroArm arm;
Servo myservo3;
Servo myservo4;

int pos3 = 0;
int pos4 = 0;

typedef struct coordinate {
  float x;
  float y;
  float z;
  int w;
  int slope;
};
coordinate ids[13];
coordinate mids[7];
coordinate targets[7] = {{},
  {1487, 1854, 70, 104, 34},
  {1966, 955, 50, , 179},
  {1744, 1765, 50, ,46 },
  {1987, 1316, 50, ,125},
  {1620, 1157, 50, ,170},
  {1796, 851, 50, ,160}
};
coordinate current_coord = {100 , 150, 400};
coordinate target_coord;

void setup() {
  Serial.begin(115200);
  Serial1.begin(1000000);
  //12c 통신 초기화
  Wire.begin();
  huskylens.begin(Wire);
  arm.offset.m1_deg = 0; //기존 모터 세팅 값 보정
  arm.offset.m2_deg = 0; //기존 모터 세팅 값 보정
  arm.pSerial = &Serial1;

  myservo3.attach(11);
  myservo4.attach(10);

  arm.WritePosEx(1, 2047, 1000, 50);
  arm.WritePosEx(2, 2047, 1000, 50);
  delay(1000);
  arm._init(); // 로봇팔 초기화
  delay(1000);
  arm.movez(400);
  myservo4.write(25);
}

void loop() {
  scan_tags();
  for (int i = 1; i <= 6; i++) {
    arm.movep(mids[i].x, mids[i].y);
    delay(1000);
    find_slopeNmove(i);
    /*
      catch_block(i);//블록 내려가서 집고 올리기
      arm.movep(targets[i].x, targets[i].y);
      move_block(i);//블록 내려놓기
      요 3줄은 하나로 통합하자*/
  }
}

// 지정한 범위를 움직이며 태그 인식
void scan_tags() {
  for (int i = 0; i <= 120; i += 10) {
    arm.movep(70, 240 - i);
    current_coord = {70 , 240 - i};
    huskylens.request();
    if (huskylens.isLearned()) {
      while (huskylens.available()) {
        HUSKYLENSResult result = huskylens.read();
        find_abs_coord(result.xCenter, result.yCenter);
        ids[result.ID] = {target_coord.x , target_coord.y};
      }
    }
  }
  for (int i = 1; i <= 6; i++) {
    mids[i] = {(ids[i * 2 - 1].x + ids[i * 2].x) / 2, (ids[i * 2 - 1].y + ids[i * 2].y) / 2};
  }
  Serial.print(mids[1].x);
  Serial.print(mids[1].y);
}


// 타겟의 절대 좌표를 target_coord에 저장
void find_abs_coord(float target_x, float target_y) {
  float current_deg = arm.pul2deg(arm.ReadPos(1)) + arm.pul2deg(arm.ReadPos(2));
  float moniter_center[2] = {160, 220};
  float moniter_deg = atan2(-target_y + moniter_center[1], target_x - moniter_center[0]) * (180 / PI);
  float abs_deg = (moniter_deg + current_deg) * (PI / 180);
  float dist = sqrt(pow(target_x - moniter_center[0], 2) + pow(target_y - moniter_center[1], 2));
  float delta_x = -dist * cos(abs_deg) / 4;
  float delta_y = dist * sin(abs_deg) / 4 ;
  Serial.println(String() + F("current_deg: ") + current_deg + F(", moniter_deg: ") + moniter_deg + F(", abs_deg: ") + abs_deg + F(", dist: ") + dist + F(", dx: ") + delta_x + F(", dy: ") + delta_y);
  target_coord = {current_coord.x + delta_x, current_coord.y + delta_y, };
}

void find_slopeNmove(int block) {
  coordinate id[3];
  huskylens.request();
  if (huskylens.isLearned()) {
    while (huskylens.available()) {
      HUSKYLENSResult result = huskylens.read();
      if (result.ID == block * 2 - 1) {
        id[1] = {result.xCenter, result.yCenter};
      }
      else {
        id[2] = {result.xCenter, result.yCenter};
      }
    }
  }
  float slope = atan2(id[2].y - id[1].y, id[2].x - id[1].x) * (180 / PI);
  myservo3.write(abs(slope));
  find_abs_coord(id[1].x, id[1].y);
  ids[block * 2 - 1] = {target_coord.x , target_coord.y};
  find_abs_coord(id[2].x, id[2].y);
  ids[block * 2] = {target_coord.x , target_coord.y};
  mids[block] = {(ids[block * 2 - 1].x + ids[block * 2].x) / 2, (ids[block * 2 - 1].y + ids[block * 2].y) / 2};
  arm.movep(mids[block].x, mids[block].y);
  arm.movez(targets[block].z);
  myservo4.write(targets[block].w);
  delay(500);
  arm.movez(400);
  arm.WritePosEx(1, targets[block].x, 1000, 50);
  arm.WritePosEx(2, targets[block].y, 1000, 50);
  myservo3.write(targets[block].slope);
  arm.movez(targets[block].z);
  myservo4.write(25);
  delay(500);
  arm.movez(400);
}
