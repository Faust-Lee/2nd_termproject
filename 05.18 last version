#include <AIROARM.h>
#include "SoftwareSerial.h"
#include "HUSKYLENS.h"
#include <Servo.h>

HUSKYLENS huskylens;
AiroArm arm;
Servo myservo3;
Servo myservo4;

int pos3 = 0;
int pos4 = 0;


//while문 탈출변수
bool flag = 1;
//단계 변수
int seq = 0;
//블록1,2의 x,y,id좌표 변수
int block1_x, block1_y, block2_x, block2_y, block1_id, block2_id, mid_x, mid_y;



typedef struct coordinate {
  float x;
  float y;
};
coordinate ids[13];
coordinate mids[7];
coordinate targets[7];
coordinate current_coord = {100 , 150};
coordinate target_coord;

void setup() {
  Serial.begin(115200);
  Serial1.begin(1000000);
  //12c 통신 초기화
  Wire.begin();
  huskylens.begin(Wire);
  arm.offset.m1_deg = 0; //기존 모터 세팅 값 보정
  arm.offset.m2_deg = 0; //기존 모터 세팅 값 보정
  arm.pSerial = &Serial1;
  arm._init(); // 로봇팔 초기화

  myservo3.attach(9);
  myservo4.attach(10);

  arm.movep(100, 150, 400);
  delay(1000);
}

void loop() {

  scan_tags();
  for (int i = i; i <= 6; i++) {
    arm.movep(mids[i].x, mids[i].y);
    catch_block(mids[i]);
    arm.movep(targets[i].x, targets[i].y);
    move_block(targets[i]);
  }
}

void scan_tags() {
  for (int i = 0; i <= 120; i += 10) {
    arm.movep(70, 240 - i);
    current_coord = {70 , 240 - i};
    huskylens.request();
    if (huskylens.isLearned()) {
      while (huskylens.available()) {
        HUSKYLENSResult result = huskylens.read();
        find_abs_coord(result.xCenter, result.yCenter);
        ids[result.ID] = {target_coord.x , target_coord.y};
      }
    }
  }
  for (int i = 1; i <= 6; i++) {
    mids[i] = {(ids[i * 2 - 1].x + ids[i * 2].x) / 2, (ids[i * 2 - 1].y + ids[i * 2].y) / 2};
  }
}


// 타겟의 절대 좌표를 target_coord에 저장
void find_abs_coord(float target_x, float target_y) {
  float current_deg = arm.pul2deg(arm.ReadPos(1)) + arm.pul2deg(arm.ReadPos(2));
  float moniter_center[2] = {160, 120};
  float moniter_deg = atan2(-target_y + moniter_center[1], target_x - moniter_center[0]) * (180 / PI);
  float abs_deg = (moniter_deg + current_deg) * (PI / 180);
  float dist = sqrt(pow(target_x - moniter_center[0], 2) + pow(target_y - moniter_center[1], 2));
  float delta_x = -dist * cos(abs_deg) / 4;
  float delta_y = dist * sin(abs_deg) / 4 ;
  Serial.println(String() + F("current_deg: ") + current_deg + F(", moniter_deg: ") + moniter_deg + F(", abs_deg: ") + abs_deg + F(", dist: ") + dist + F(", dx: ") + delta_x + F(", dy: ") + delta_y);
  target_coord = {current_coord.x + delta_x, current_coord.y + delta_y};

}

void catch_block(coordinate mid) {
  float slope_deg = atan2(block2_y - block1_y, block2_x - block1_x) * (180 / PI);
  if (slope_deg < 0) {
    slope_deg += 180;
  }
  for (pos3 = 0; pos3 <= slope_deg; pos3 += 1) {
    myservo3.write(pos3);
    delay(15);
  }

  arm.movez(20);

  for (pos4 = 180; pos4 >= 0; pos4 -= 1) {
    myservo4.write(pos4);
    delay(15);
  }
}

void move_block(coordinate target) {
  arm.movep(target.x, target.y);
  delay(500); // 로봇 팔이 움직일 시간을 줌

  arm.movez(20);

  for (pos4 = 0; pos4 <= 180; pos4 += 1) {
    myservo4.write(pos4);
    delay(15);
  }
  arm.movep(100, 150);
  delay(2000);
}
